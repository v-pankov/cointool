// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	currency "github.com/vdrpkv/cointool/internal/currency"

	mock "github.com/stretchr/testify/mock"
)

// ConvertCommandHandler is an autogenerated mock type for the ConvertCommandHandler type
type ConvertCommandHandler struct {
	mock.Mock
}

// HandleConvertCommand provides a mock function with given fields: ctx, amount, from, to
func (_m *ConvertCommandHandler) HandleConvertCommand(ctx context.Context, amount currency.Amount, from currency.Symbol, to currency.Symbol) (currency.Amount, error) {
	ret := _m.Called(ctx, amount, from, to)

	var r0 currency.Amount
	if rf, ok := ret.Get(0).(func(context.Context, currency.Amount, currency.Symbol, currency.Symbol) currency.Amount); ok {
		r0 = rf(ctx, amount, from, to)
	} else {
		r0 = ret.Get(0).(currency.Amount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, currency.Amount, currency.Symbol, currency.Symbol) error); ok {
		r1 = rf(ctx, amount, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConvertCommandHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewConvertCommandHandler creates a new instance of ConvertCommandHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConvertCommandHandler(t mockConstructorTestingTNewConvertCommandHandler) *ConvertCommandHandler {
	mock := &ConvertCommandHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
