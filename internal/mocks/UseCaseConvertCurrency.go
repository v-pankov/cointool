// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/vdrpkv/cointool/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseConvertCurrency is an autogenerated mock type for the UseCaseConvertCurrency type
type UseCaseConvertCurrency struct {
	mock.Mock
}

// DoUseCaseConvertCurrency provides a mock function with given fields: ctx, amount, from, to
func (_m *UseCaseConvertCurrency) DoUseCaseConvertCurrency(ctx context.Context, amount entity.CurrencyAmount, from entity.CurrencySymbol, to entity.CurrencySymbol) (entity.CurrencyAmount, error) {
	ret := _m.Called(ctx, amount, from, to)

	var r0 entity.CurrencyAmount
	if rf, ok := ret.Get(0).(func(context.Context, entity.CurrencyAmount, entity.CurrencySymbol, entity.CurrencySymbol) entity.CurrencyAmount); ok {
		r0 = rf(ctx, amount, from, to)
	} else {
		r0 = ret.Get(0).(entity.CurrencyAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CurrencyAmount, entity.CurrencySymbol, entity.CurrencySymbol) error); ok {
		r1 = rf(ctx, amount, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCaseConvertCurrency interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseConvertCurrency creates a new instance of UseCaseConvertCurrency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseConvertCurrency(t mockConstructorTestingTNewUseCaseConvertCurrency) *UseCaseConvertCurrency {
	mock := &UseCaseConvertCurrency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
